# root logger logs everything
log4j.rootLogger=DEBUG, file
log4j.rootLogger=ERROR, console

#log4j.logger.SimulatedMQ=INFO, console

# specific loggers log their parts of the correct tables in the database
log4j.logger.model=INFO, static
log4j.logger.walls=INFO, static
log4j.logger.values=INFO, static
log4j.logger.agents=INFO, static

# CONSOLE
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

# STATIC = logs everything to a file, swapping between two files after Count
#          lines, adding a swap() command to trigger the swap at the client
log4j.appender.static=penoplatinum.gateway.UpdatesJSAppender
log4j.appender.static.Robot=Ghost1
log4j.appender.static.File1=/Users/xtof/Workspace/KUL/po-mindstorms/src/java/penoplatinum/ui/dashboard/updates-1.js
log4j.appender.static.File2=/Users/xtof/Workspace/KUL/po-mindstorms/src/java/penoplatinum/ui/dashboard/updates-2.js
log4j.appender.static.Count=250
log4j.appender.static.layout=org.apache.log4j.PatternLayout
log4j.appender.static.layout.ConversionPattern=%m

# FILE

# boilerplate appender setup
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.MaxFileSize=10MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n
# custom configuration
log4j.appender.file.File=/tmp/robot.log

# DATABASE

# MODEL boilerplate appender setup
log4j.appender.model-db=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.model-db.driver=com.mysql.jdbc.Driver
log4j.appender.model-db.layout=org.apache.log4j.PatternLayout
log4j.appender.model-db.sql=INSERT INTO model (robot, lightValue, lightColor, avgLightValue, barcode, sonarAngle, sonarDistance, ir1, ir2, ir3, ir4, ir5, ir_dist, walls, value_n, value_e, value_s, value_w, event, source, plan, queue, action, argument, rate) VALUES ( %m );
# custom configuration
log4j.appender.model-db.URL=jdbc:mysql://localhost/robots
log4j.appender.model-db.user=platinum
log4j.appender.model-db.password=platinum

# WALLS boilerplate appender setup
log4j.appender.walls-db=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.walls-db.driver=com.mysql.jdbc.Driver
log4j.appender.walls-db.layout=org.apache.log4j.PatternLayout
log4j.appender.walls-db.sql=INSERT INTO sectorWalls ( robot, grid, x, y, walls ) VALUES ( %m );
# custom configuration
log4j.appender.walls-db.URL=jdbc:mysql://localhost/robots
log4j.appender.walls-db.user=platinum
log4j.appender.walls-db.password=platinum

# VALUES boilerplate appender setup
log4j.appender.values-db=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.values-db.driver=com.mysql.jdbc.Driver
log4j.appender.values-db.layout=org.apache.log4j.PatternLayout
log4j.appender.values-db.sql=INSERT INTO sectorValues ( robot, grid, x, y, value ) VALUES ( %m );
# custom configuration
log4j.appender.values-db.URL=jdbc:mysql://localhost/robots
log4j.appender.values-db.user=platinum
log4j.appender.values-db.password=platinum

# AGENTS boilerplate appender setup
log4j.appender.agents-db=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.agents-db.driver=com.mysql.jdbc.Driver
log4j.appender.agents-db.layout=org.apache.log4j.PatternLayout
log4j.appender.agents-db.sql=INSERT INTO sectorAgents ( robot, grid, name, x, y, bearing, color ) VALUES ( %m );
# custom configuration
log4j.appender.agents-db.URL=jdbc:mysql://localhost/robots
log4j.appender.agents-db.user=platinum
log4j.appender.agents-db.password=platinum
